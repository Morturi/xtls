import{_ as t,r as a,o as p,c,a as s,b as e,d as l,e as o}from"./app-QXcD5M6C.js";const d={},i=o(`<h1 id="splithttp" tabindex="-1"><a class="header-anchor" href="#splithttp"><span>SplitHTTP</span></a></h1><p>使用HTTP分块传输编码下载，使用多个HTTP POST请求进行上传。</p><p>可以通过不支持WebSocket的CDN上，但仍有一些要求：</p><ul><li><p>CDN必须支持HTTP分块传输，且支持流式传输不会缓冲响应，核心将会发送 <code>X-Accel-Buffering: no</code> 以告知CDN，但是需要CDN遵守此标头。</p><p>如果连接被挂起，该传输很可能无法工作。</p></li><li><p>CDN必须禁用缓存, 或者缓存不忽略查询字符串。</p></li></ul><p>上行效率可能非常有限</p><p><code>SplitHTTP</code> 也接受 <code>X-Forwarded-For</code> header。</p><h2 id="splithttpobject" tabindex="-1"><a class="header-anchor" href="#splithttpobject"><span>SplitHttpObject</span></a></h2><p>The <code>SplitHttpObject</code> 对应传输配置的 <code>splithttpSettings</code> 项。</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;host&quot;</span><span class="token operator">:</span> <span class="token string">&quot;xray.com&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;headers&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;key&quot;</span><span class="token operator">:</span> <span class="token string">&quot;value&quot;</span>
  <span class="token punctuation">}</span>
  <span class="token property">&quot;maxUploadSize&quot;</span><span class="token operator">:</span> <span class="token number">1000000</span><span class="token punctuation">,</span>
  <span class="token property">&quot;maxConcurrentUploads&quot;</span><span class="token operator">:</span> <span class="token number">10</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>path</code>: string</p></blockquote><p>WebSocket 所使用的 HTTP 协议路径，默认值为 <code>&quot;/&quot;</code>。</p><blockquote><p><code>host</code>: string</p></blockquote><p>WebSocket 的HTTP请求中所发送的host，默认值为空。若服务端值为空时，不验证客户端发送来的host值。</p><p>当在服务端指定该值，或在 <code>headers</code> 中指定host，将会校验与客户端请求host是否一致。</p><p>客户端选择发送的host优先级 <code>host</code> &gt; <code>headers</code> &gt; <code>address</code></p><blockquote><p><code>headers</code>: map {string: string}</p></blockquote><p>自定义 HTTP 头，一个键值对，每个键表示一个 HTTP 头的名称，对应的值是字符串。</p><blockquote><p><code>maxUploadSize</code>: int</p></blockquote><p>上传分块的最大大小，单位为字节，默认为 1 MB.</p><p>这个值应该小于CDN或其他HTTP反向代理所允许的最大请求体，否则将抛出 HTTP 413 错误。</p><p>适当提升这个值可以增加上传速率。</p><blockquote><p><code>maxConcurrentUploads</code>: int</p></blockquote><p>上传连接的最大并发数，默认为10, 连接将尽可能被重用。</p><p>如果连接不稳定或者服务端内存占用过高可以尝试调低。</p><p>客户端所设定的值必须低于服务端，否则可能导致连接问题。</p><h2 id="已知问题" tabindex="-1"><a class="header-anchor" href="#已知问题"><span>已知问题</span></a></h2><ul><li>ALPN 协商仍未正确实现，HTTPS连接将默认使用H2。</li></ul><h2 id="协议细节" tabindex="-1"><a class="header-anchor" href="#协议细节"><span>协议细节</span></a></h2>`,28),r={href:"https://github.com/XTLS/Xray-core/pull/3412",target:"_blank",rel:"noopener noreferrer"},u=o("<ol><li><p>使用 <code>GET /?session=UUID</code> 打开一个新的“虚拟”流连接。服务器立即回复 <code>200 OK</code> 和 <code>Transfer Encoding:chunked</code> , 并立即发送一个两字节的有效负载，以强制HTTP中间盒刷新标头。</p></li><li><p>一旦客户端完成协商，它可以使用 <code>POST /?session=UUID?seq=0</code> 开始发送上行数据. <code>seq</code> 作用类似于 TCP 序列号, 数据包可以被同时发送，服务端必须按序列号将数据重组。序列号不会重置。</p></li><li><p><code>GET</code> 请求将一直保持在打开状态直到连接被终止，服务端和客户端都可以关闭连接。具体行为取决于HTTP版本。</p></li></ol><p>建议:</p><ul><li><p>不要假设CDN会正确传输所有标头，这个协议是为了穿透不支持WS的CDN设计的，这些CDN的架构通常不怎么友好。</p></li><li><p>应该假设所有HTTP连接都没有流式请求，所以每个包的大小应该基于延迟、吞吐量以及中间盒本身的限制考虑(类似TCP的MTU与纳格算法)。</p></li></ul>",3);function h(k,T){const n=a("ExternalLinkIcon");return p(),c("div",null,[i,s("p",null,[e("讨论与建议详见 "),s("a",r,[e("PR"),l(n)]),e("，这里是实现简述。")]),u])}const q=t(d,[["render",h],["__file","splithttp.html.vue"]]);export{q as default};
