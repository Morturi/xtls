import{_ as e,o as t,c as s,e as n}from"./app-C2Rft6bO.js";const o={},a=n(`<h1 id="splithttp" tabindex="-1"><a class="header-anchor" href="#splithttp"><span>SplitHTTP</span></a></h1><p>Uses HTTP chunked-transfer encoding for download, and multiple HTTP requests for upload.</p><p>Can be deployed on CDNs that do not support WebSocket, but there are still some requirements:</p><ul><li><p>The CDN must support HTTP chunked transfer encoding in a streaming fashion, no response buffering. The transport will send the <code>X-Accel-Buffering: no</code> response header, but only some CDNs respect this.</p><p>If the connection hangs, most likely this part does not work.</p></li><li><p>The CDN must disable caching, or caching should include the query string in cache key.</p></li></ul><p>Download performance should be similar to WebSocket, but upload is limited.</p><p>Like WebSocket transport, SplitHTTP parses the <code>X-Forwarded-For</code> header for logging.</p><h2 id="splithttpobject" tabindex="-1"><a class="header-anchor" href="#splithttpobject"><span>SplitHttpObject</span></a></h2><p>The <code>SplitHttpObject</code> corresponds to the <code>splithttpSettings</code> section under transport configurations.</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;host&quot;</span><span class="token operator">:</span> <span class="token string">&quot;xray.com&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;headers&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;key&quot;</span><span class="token operator">:</span> <span class="token string">&quot;value&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>path</code>: string</p></blockquote><p>HTTP path used by the connection. Defaults to <code>&quot;/&quot;</code>.</p><blockquote><p><code>host</code>: string</p></blockquote><p>HTTP Host sent by the connection. Empty by default. If this value is empty on the server, the host header sent by clients will not be validated.</p><p>If the <code>Host</code> header has been defined on the server in any way, the server will validate if the <code>Host</code> header matches.</p><p>The current priority of the <code>Host</code> header sent by clients: <code>host</code> &gt; <code>headers</code> &gt; <code>address</code></p><blockquote><p><code>headers</code>: map {string: string}</p></blockquote><p>Customized HTTP headers defined in key-value pairs. Defaults to empty.</p><h2 id="known-issues" tabindex="-1"><a class="header-anchor" href="#known-issues"><span>Known issues</span></a></h2><p>ALPN negotiation is currently not correctly implemented. HTTPS connections always assume HTTP/2 prior knowledge.</p>`,19),p=[a];function c(i,r){return t(),s("div",null,p)}const l=e(o,[["render",c],["__file","splithttp.html.vue"]]);export{l as default};
