"use strict";(self.webpackChunkXray_docs_next=self.webpackChunkXray_docs_next||[]).push([[8800],{82809:(t,e,n)=>{n.r(e),n.d(e,{data:()=>o});const o={key:"v-d76e893a",path:"/config/outbounds/freedom.html",title:"Freedom",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"OutboundConfigurationObject",slug:"outboundconfigurationobject",children:[]}],filePathRelative:"config/outbounds/freedom.md",git:{updatedTime:1703564907e3,contributors:[{name:"JimhHan",email:"50871214+JimhHan@users.noreply.github.com",commits:4},{name:"yuhan6665",email:"1588741+yuhan6665@users.noreply.github.com",commits:2},{name:"rootmelo92118",email:"32770959+rootmelo92118@users.noreply.github.com",commits:1},{name:"ちか",email:"88967758+chika0801@users.noreply.github.com",commits:1}]}}},33750:(t,e,n)=>{n.r(e),n.d(e,{default:()=>X});var o=n(66252);const s=(0,o.uE)('<h1 id="freedom" tabindex="-1"><a class="header-anchor" href="#freedom" aria-hidden="true">#</a> Freedom</h1><p>Freedom 是一个出站协议，可以用来向任意网络发送（正常的） TCP 或 UDP 数据。</p><h2 id="outboundconfigurationobject" tabindex="-1"><a class="header-anchor" href="#outboundconfigurationobject" aria-hidden="true">#</a> OutboundConfigurationObject</h2><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;domainStrategy&quot;</span><span class="token operator">:</span> <span class="token string">&quot;AsIs&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;redirect&quot;</span><span class="token operator">:</span> <span class="token string">&quot;127.0.0.1:3366&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;userLevel&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;fragment&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;packets&quot;</span><span class="token operator">:</span> <span class="token string">&quot;tlshello&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;length&quot;</span><span class="token operator">:</span> <span class="token string">&quot;100-200&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;interval&quot;</span><span class="token operator">:</span> <span class="token string">&quot;10-20&quot;</span> <span class="token comment">// ms</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><blockquote><p><code>domainStrategy</code>: &quot;AsIs&quot;<br> &quot;UseIP&quot; | &quot;UseIPv6v4&quot; | &quot;UseIPv6&quot; | &quot;UseIPv4v6&quot; | &quot;UseIPv4&quot;<br> &quot;ForceIP&quot; | &quot;ForceIPv6v4&quot; | &quot;ForceIPv6&quot; | &quot;ForceIPv4v6&quot; | &quot;ForceIPv4&quot;</p></blockquote><p>Xray-core v1.8.6 新增功能：<br><code>&quot;UseIPv6v4&quot;</code> | <code>&quot;UseIPv4v6&quot;</code><br><code>&quot;ForceIP&quot;</code> | <code>&quot;ForceIPv6v4&quot;</code> | <code>&quot;ForceIPv6&quot;</code> | <code>&quot;ForceIPv4v6&quot;</code> | <code>&quot;ForceIPv4&quot;</code></p><p>若不写此参数，或留空，默认值 <code>&quot;AsIs&quot;</code>。</p><p>在目标地址为域名时, 配置相应的值, Freedom 的行为模式如下:</p>',8),a=(0,o._)("li",null,[(0,o._)("code",null,'"AsIs"'),(0,o.Uk)(": Freedom 通过系统 DNS 服务器解析获取 IP, 向此域名发出连接。")],-1),l=(0,o._)("code",null,'"UseIP"',-1),r=(0,o.Uk)("、"),c=(0,o._)("code",null,'"UseIPv4"',-1),u=(0,o.Uk)(" 和 "),d=(0,o._)("code",null,'"UseIPv6"',-1),p=(0,o.Uk)(": Xray 使用 "),i=(0,o.Uk)("内置 DNS 服务器"),g=(0,o.Uk)(" 解析获取 IP, 向此域名发出连接。"),q={class:"custom-container tip"},v=(0,o._)("p",{class:"custom-container-title"},"TIP 1",-1),b=(0,o.Uk)("当使用 "),I=(0,o._)("code",null,'"UseIP"',-1),P=(0,o.Uk)(" 模式，并且 "),m=(0,o.Uk)("出站连接配置"),y=(0,o.Uk)(" 中指定了 "),h=(0,o._)("code",null,"sendThrough",-1),k=(0,o.Uk)(" 时，Freedom 会根据 "),x=(0,o._)("code",null,"sendThrough",-1),U=(0,o.Uk)(" 的值自动判断所需的 IP 类型，IPv4 或 IPv6。"),f=(0,o.uE)('<div class="custom-container tip"><p class="custom-container-title">TIP 2</p><p>当使用 <code>&quot;UseIPv4&quot;</code> 或 <code>&quot;UseIPv6&quot;</code> 模式时，Freedom 会只使用对应的 IPv4 或 IPv6 地址。当 <code>sendThrough</code> 指定了不匹配的本地地址时，将导致连接失败。</p></div><div class="custom-container tip"><p class="custom-container-title">TIP 3</p><p><code>UseIP</code> 和 <code>ForceIP</code> 的区别是，前者解析失败了会走 AsIs，后者解析失败了会被 block。这样整个 <code>domainStrategy</code> 都更加灵活了。</p></div><div class="language-jsonc ext-jsonc line-numbers-mode"><pre class="language-jsonc"><code>    &quot;dns&quot;: {\n        &quot;servers&quot;: [\n            &quot;https://1.1.1.1/dns-query&quot;\n        ],\n        &quot;queryStrategy&quot;: &quot;UseIP&quot; // 默认值 UseIP\n    }\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>UseIP 同时查询 A 和 AAAA 记录</li><li>UseIPv4 只查询 A 记录</li><li>UseIPv6 只查询 AAAA 记录</li></ul><div class="language-jsonc ext-jsonc line-numbers-mode"><pre class="language-jsonc"><code>        {\n            &quot;protocol&quot;: &quot;freedom&quot;,\n            &quot;settings&quot;: {\n                &quot;domainStrategy&quot;: &quot;AsIs&quot; // 默认值 AsIs\n            }\n        }\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><table><thead><tr><th style="text-align:left;"></th><th style="text-align:center;">UseIP</th><th style="text-align:center;">UseIPv6v4</th><th style="text-align:center;">UseIPv6</th><th style="text-align:center;">UseIPv4v6</th><th style="text-align:center;">UseIPv4</th></tr></thead><tbody><tr><td style="text-align:left;"><code>&quot;queryStrategy&quot;: &quot;UseIP&quot;</code></td><td style="text-align:center;"><strong>1</strong></td><td style="text-align:center;"><strong>2</strong></td><td style="text-align:center;">IPv6</td><td style="text-align:center;"><strong>3</strong></td><td style="text-align:center;">IPv4</td></tr><tr><td style="text-align:left;"><code>&quot;queryStrategy&quot;: &quot;UseIPv4&quot;</code></td><td style="text-align:center;">IPv4</td><td style="text-align:center;"><strong>4</strong></td><td style="text-align:center;"><strong>5</strong></td><td style="text-align:center;"><strong>6</strong></td><td style="text-align:center;">IPv4</td></tr><tr><td style="text-align:left;"><code>&quot;queryStrategy&quot;: &quot;UseIPv6&quot;</code></td><td style="text-align:center;">IPv6</td><td style="text-align:center;"><strong>7</strong></td><td style="text-align:center;">IPv6</td><td style="text-align:center;"><strong>8</strong></td><td style="text-align:center;"><strong>9</strong></td></tr></tbody></table><table><thead><tr><th style="text-align:left;"></th><th style="text-align:center;">ForceIP</th><th style="text-align:center;">ForceIPv6v4</th><th style="text-align:center;">ForceIPv6</th><th style="text-align:center;">ForceIPv4v6</th><th style="text-align:center;">ForceIPv4</th></tr></thead><tbody><tr><td style="text-align:left;"><code>&quot;queryStrategy&quot;: &quot;UseIP&quot;</code></td><td style="text-align:center;"><strong>1</strong></td><td style="text-align:center;"><strong>2</strong></td><td style="text-align:center;">IPv6</td><td style="text-align:center;"><strong>3</strong></td><td style="text-align:center;">IPv4</td></tr><tr><td style="text-align:left;"><code>&quot;queryStrategy&quot;: &quot;UseIPv4&quot;</code></td><td style="text-align:center;">IPv4</td><td style="text-align:center;">IPv4</td><td style="text-align:center;">冲突</td><td style="text-align:center;">IPv4</td><td style="text-align:center;">IPv4</td></tr><tr><td style="text-align:left;"><code>&quot;queryStrategy&quot;: &quot;UseIPv6&quot;</code></td><td style="text-align:center;">IPv6</td><td style="text-align:center;">IPv6</td><td style="text-align:center;">IPv6</td><td style="text-align:center;">IPv6</td><td style="text-align:center;">冲突</td></tr></tbody></table><p><strong>1：</strong> IPv4 IPv6 地址，随机优先<br><strong>2：</strong> IPv4 IPv6 地址，IPv6 优先<br><strong>3：</strong> IPv4 IPv6 地址，IPv4 优先<br><strong>4：</strong> IPv4 IPv6 地址，IPv6 优先，IPv6 地址由系统 DNS 查询<br><strong>5：</strong> IPv6 地址，IPv6 地址由系统 DNS 查询<br><strong>6：</strong> IPv4 IPv6 地址，IPv4 优先，IPv6 地址由系统 DNS 查询<br><strong>7：</strong> IPv4 IPv6 地址，IPv6 优先，IPv4 地址由系统 DNS 查询<br><strong>8：</strong> IPv4 IPv6 地址，IPv4 优先，IPv4 地址由系统 DNS 查询<br><strong>9：</strong> IPv4 地址，IPv4 地址由系统 DNS 查询</p><blockquote><p><code>redirect</code>: address_port</p></blockquote><p>Freedom 会强制将所有数据发送到指定地址（而不是 inbound 指定的地址）。</p><p>其值为一个字符串，样例：<code>&quot;127.0.0.1:80&quot;</code>，<code>&quot;:1234&quot;</code>。</p><p>当地址不指定时，如 <code>&quot;:443&quot;</code>，Freedom 不会修改原先的目标地址。 当端口为 <code>0</code> 时，如 <code>&quot;xray.com: 0&quot;</code>，Freedom 不会修改原先的端口。</p><blockquote><p><code>userLevel</code>: number</p></blockquote>',13),_=(0,o.Uk)("用户等级，连接会使用这个用户等级对应的 "),F=(0,o.Uk)("本地策略"),S=(0,o.Uk)("。"),j=(0,o.Uk)("userLevel 的值, 对应 "),A=(0,o.Uk)("policy"),T=(0,o.Uk)(" 中 "),D=(0,o._)("code",null,"level",-1),N=(0,o.Uk)(" 的值。 如不指定, 默认为 0。"),C=(0,o._)("blockquote",null,[(0,o._)("p",null,[(0,o._)("code",null,"fragment"),(0,o.Uk)(": map")])],-1),w=(0,o._)("p",null,"一些键值对配置项，用于控制发出的 TCP 分片，在某些情况下可以欺骗审查系统，比如绕过 SNI 黑名单。",-1),L=(0,o._)("p",null,[(0,o._)("code",null,'"packets"'),(0,o.Uk)('：支持两种分片方式 "1-3" 是 TCP 的流切片，应用于客户端第 1 至第 3 次写数据。"tlshello" 是 TLS 握手包切片。')],-1),O=(0,o._)("p",null,[(0,o._)("code",null,'"length"'),(0,o.Uk)("：分片包长 (byte)")],-1),W=(0,o._)("p",null,[(0,o._)("code",null,'"interval"'),(0,o.Uk)("：分片间隔（ms）")],-1),X={render:function(t,e){const n=(0,o.up)("RouterLink");return(0,o.wg)(),(0,o.iD)(o.HY,null,[s,(0,o._)("ul",null,[a,(0,o._)("li",null,[l,r,c,u,d,p,(0,o.Wm)(n,{to:"/config/dns.html"},{default:(0,o.w5)((()=>[i])),_:1}),g])]),(0,o._)("div",q,[v,(0,o._)("p",null,[b,I,P,(0,o.Wm)(n,{to:"/config/outbound.html#outboundobject"},{default:(0,o.w5)((()=>[m])),_:1}),y,h,k,x,U])]),f,(0,o._)("p",null,[_,(0,o.Wm)(n,{to:"/config/policy.html#levelpolicyobject"},{default:(0,o.w5)((()=>[F])),_:1}),S]),(0,o._)("p",null,[j,(0,o.Wm)(n,{to:"/config/policy.html#policyobject"},{default:(0,o.w5)((()=>[A])),_:1}),T,D,N]),C,w,L,O,W],64)}}}}]);